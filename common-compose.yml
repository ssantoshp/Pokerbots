version: "3.9"
services:
  # Postgres database
  db:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: postgres:14
    user: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - database:/var/lib/postgresql/data

  # Frontend and backend
  website:
    volumes:
      - ~/.aws/:/root/.aws:ro
    environment:
      - DB_URL=db:5432/postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
      - REDIRECT_URI=${REDIRECT_URI}

      - PFP_S3_BUCKET=${PFP_S3_BUCKET}
      - BOT_S3_BUCKET=${BOT_S3_BUCKET}
      - GAME_LOGS_S3_BUCKET=${GAME_LOGS_S3_BUCKET}
      - BUILD_LOGS_S3_BUCKET=${BUILD_LOGS_S3_BUCKET}
      - BOT_SIZE=5000000

      - AZURE_SECRET=${AZURE_SECRET}
      - SECRET_KEY=${SECRET_KEY}

      - BOT_UPLOADS_QUEUE_URL=http://sqs:9324/queue/bot_uploads
      - NEW_GAMES_QUEUE_URL=http://sqs:9324/queue/new_games

      - RUST_LOG=info

      - APP_PFP_ENDPOINT=https://${DOMAIN_NAME}:9000/${PFP_S3_BUCKET}/
      - S3_ADDRESS=http://s3:9000
      - SQS_ADDRESS=http://sqs:9324
      - PORT=3000

      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}

  gameplay:
    volumes:
      - ~/.aws/:/root/.aws:ro
    environment:
      - RUST_LOG=info
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}

      - NEW_GAMES_QUEUE_URL=http://sqs:9324/queue/new_games
      - GAME_RESULTS_QUEUE_URL=http://sqs:9324/queue/game_results

      - S3_ADDRESS=http://s3:9000
      - SQS_ADDRESS=http://sqs:9324

      - COMPILED_BOT_S3_BUCKET=${COMPILED_BOT_S3_BUCKET}
      - GAME_LOGS_S3_BUCKET=${GAME_LOGS_S3_BUCKET}

  builder:
    volumes:
      - ~/.aws/:/root/.aws:ro
    privileged: true
    environment:
      - RUST_LOG=info
      - COMPILED_BOT_S3_BUCKET=${COMPILED_BOT_S3_BUCKET}
      - BOT_S3_BUCKET=${BOT_S3_BUCKET}
      - BUILD_LOGS_S3_BUCKET=${BUILD_LOGS_S3_BUCKET}

      - BOT_UPLOADS_QUEUE_URL=http://sqs:9324/queue/bot_uploads
      - BUILD_RESULTS_QUEUE_URL=http://sqs:9324/queue/build_results

      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_ADDRESS=http://s3:9000
      - SQS_ADDRESS=http://sqs:9324
  results:
    volumes:
      - ~/.aws/:/root/.aws:ro
    environment:
      - BUILD_RESULTS_QUEUE_URL=http://sqs:9324/queue/build_results
      - GAME_RESULTS_QUEUE_URL=http://sqs:9324/queue/game_results
      - NEW_GAMES_QUEUE_URL=http://sqs:9324/queue/new_games

      - DB_URL=db:5432/postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}

      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - RUST_LOG=info
      - S3_ADDRESS=http://s3:9000
      - SQS_ADDRESS=http://sqs:9324
      - GAME_LOGS_S3_BUCKET=${GAME_LOGS_S3_BUCKET}
      - BUILD_LOGS_S3_BUCKET=${BUILD_LOGS_S3_BUCKET}
  s3:
    image: minio/minio
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address :9999

  createbuckets:
    image: minio/mc
    environment:
      MINIO_ACCESS_KEY: ${S3_ACCESS_KEY}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
      PFP_S3_BUCKET: ${PFP_S3_BUCKET}
      BOT_S3_BUCKET: ${BOT_S3_BUCKET}
      BUILD_LOGS_S3_BUCKET: ${BUILD_LOGS_S3_BUCKET}
      GAME_LOGS_S3_BUCKET: ${GAME_LOGS_S3_BUCKET}
      COMPILED_BOT_S3_BUCKET: ${COMPILED_BOT_S3_BUCKET}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://s3:9000 $S3_ACCESS_KEY $S3_SECRET_KEY;
      /usr/bin/mc mb myminio/$PFP_S3_BUCKET;
      /usr/bin/mc anonymous set public myminio/$PFP_S3_BUCKET;
      /usr/bin/mc mb myminio/$BOT_S3_BUCKET;
      /usr/bin/mc mb myminio/$COMPILED_BOT_S3_BUCKET;
      /usr/bin/mc mb myminio/$BUILD_LOGS_S3_BUCKET;
      /usr/bin/mc mb myminio/$GAME_LOGS_S3_BUCKET;
      exit 0;
      "

  sqs:
    image: softwaremill/elasticmq
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf:ro

  nginx:
    image: nginx:stable
    command: |
      sh -c '
      while :; do
        sed s/DOMAIN_NAME/${DOMAIN_NAME}/g /nginx.conf.template > /etc/nginx/nginx.conf
        sleep 6h & wait $${!}
        nginx -s reload
      done & (sleep 1 && nginx -g "daemon off;")'
    volumes:
      - ./.volumes/certbot/conf:/etc/letsencrypt
      - ./.volumes/certbot/www:/var/www/certbot
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    ports:
      - 80:80
      - 443:443
      - 9000:9000
